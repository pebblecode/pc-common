//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PebbleCode.Monitoring
{
    
    
    /// <summary>
    /// The MonitoringConfiguration Configuration Section.
    /// </summary>
    public partial class MonitoringConfiguration : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the MonitoringConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string MonitoringConfigurationSectionName = "monitoringConfiguration";
        
        /// <summary>
        /// Gets the MonitoringConfiguration instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public static global::PebbleCode.Monitoring.MonitoringConfiguration Instance
        {
            get
            {
                return ((global::PebbleCode.Monitoring.MonitoringConfiguration)(global::System.Configuration.ConfigurationManager.GetSection(global::PebbleCode.Monitoring.MonitoringConfiguration.MonitoringConfigurationSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PebbleCode.Monitoring.MonitoringConfiguration.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::PebbleCode.Monitoring.MonitoringConfiguration.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region serviceMonitorGroups Property
        /// <summary>
        /// The XML name of the <see cref="serviceMonitorGroups"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string serviceMonitorGroupsPropertyName = "serviceMonitorGroups";
        
        /// <summary>
        /// Gets or sets the serviceMonitorGroups.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The serviceMonitorGroups.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PebbleCode.Monitoring.MonitoringConfiguration.serviceMonitorGroupsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::PebbleCode.Monitoring.ServiceMonitorGroups serviceMonitorGroups
        {
            get
            {
                return ((global::PebbleCode.Monitoring.ServiceMonitorGroups)(base[global::PebbleCode.Monitoring.MonitoringConfiguration.serviceMonitorGroupsPropertyName]));
            }
            set
            {
                base[global::PebbleCode.Monitoring.MonitoringConfiguration.serviceMonitorGroupsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace PebbleCode.Monitoring
{
    
    
    /// <summary>
    /// The ServiceMonitorConfiguration Configuration Element.
    /// </summary>
    public partial class ServiceMonitorConfiguration : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PebbleCode.Monitoring.ServiceMonitorConfiguration.TypePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Type
        {
            get
            {
                return ((string)(base[global::PebbleCode.Monitoring.ServiceMonitorConfiguration.TypePropertyName]));
            }
            set
            {
                base[global::PebbleCode.Monitoring.ServiceMonitorConfiguration.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PebbleCode.Monitoring.ServiceMonitorConfiguration.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Name
        {
            get
            {
                return ((string)(base[global::PebbleCode.Monitoring.ServiceMonitorConfiguration.NamePropertyName]));
            }
            set
            {
                base[global::PebbleCode.Monitoring.ServiceMonitorConfiguration.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Settings Property
        /// <summary>
        /// The XML name of the <see cref="Settings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string SettingsPropertyName = "settings";
        
        /// <summary>
        /// Gets or sets the Settings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Settings.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PebbleCode.Monitoring.ServiceMonitorConfiguration.SettingsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::PebbleCode.Monitoring.Settings Settings
        {
            get
            {
                return ((global::PebbleCode.Monitoring.Settings)(base[global::PebbleCode.Monitoring.ServiceMonitorConfiguration.SettingsPropertyName]));
            }
            set
            {
                base[global::PebbleCode.Monitoring.ServiceMonitorConfiguration.SettingsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace PebbleCode.Monitoring
{
    
    
    /// <summary>
    /// A collection of ServiceMonitorGroup instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::PebbleCode.Monitoring.ServiceMonitorGroup), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::PebbleCode.Monitoring.ServiceMonitorGroups.ServiceMonitorGroupPropertyName)]
    public partial class ServiceMonitorGroups : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::PebbleCode.Monitoring.ServiceMonitorGroup"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string ServiceMonitorGroupPropertyName = "serviceMonitorGroup";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override string ElementName
        {
            get
            {
                return global::PebbleCode.Monitoring.ServiceMonitorGroups.ServiceMonitorGroupPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::PebbleCode.Monitoring.ServiceMonitorGroups.ServiceMonitorGroupPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::PebbleCode.Monitoring.ServiceMonitorGroup)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::PebbleCode.Monitoring.ServiceMonitorGroup"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::PebbleCode.Monitoring.ServiceMonitorGroup"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::PebbleCode.Monitoring.ServiceMonitorGroup();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::PebbleCode.Monitoring.ServiceMonitorGroup"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::PebbleCode.Monitoring.ServiceMonitorGroup"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::PebbleCode.Monitoring.ServiceMonitorGroup this[int index]
        {
            get
            {
                return ((global::PebbleCode.Monitoring.ServiceMonitorGroup)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::PebbleCode.Monitoring.ServiceMonitorGroup"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::PebbleCode.Monitoring.ServiceMonitorGroup"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::PebbleCode.Monitoring.ServiceMonitorGroup this[object name]
        {
            get
            {
                return ((global::PebbleCode.Monitoring.ServiceMonitorGroup)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::PebbleCode.Monitoring.ServiceMonitorGroup"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="serviceMonitorGroup">The <see cref="global::PebbleCode.Monitoring.ServiceMonitorGroup"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Add(global::PebbleCode.Monitoring.ServiceMonitorGroup serviceMonitorGroup)
        {
            base.BaseAdd(serviceMonitorGroup);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::PebbleCode.Monitoring.ServiceMonitorGroup"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="serviceMonitorGroup">The <see cref="global::PebbleCode.Monitoring.ServiceMonitorGroup"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Remove(global::PebbleCode.Monitoring.ServiceMonitorGroup serviceMonitorGroup)
        {
            base.BaseRemove(this.GetElementKey(serviceMonitorGroup));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::PebbleCode.Monitoring.ServiceMonitorGroup"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::PebbleCode.Monitoring.ServiceMonitorGroup"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::PebbleCode.Monitoring.ServiceMonitorGroup GetItemAt(int index)
        {
            return ((global::PebbleCode.Monitoring.ServiceMonitorGroup)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::PebbleCode.Monitoring.ServiceMonitorGroup"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::PebbleCode.Monitoring.ServiceMonitorGroup"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::PebbleCode.Monitoring.ServiceMonitorGroup GetItemByKey(string name)
        {
            return ((global::PebbleCode.Monitoring.ServiceMonitorGroup)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace PebbleCode.Monitoring
{
    
    
    /// <summary>
    /// A collection of Add instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::PebbleCode.Monitoring.Add), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::PebbleCode.Monitoring.Settings.AddPropertyName)]
    public partial class Settings : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::PebbleCode.Monitoring.Add"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string AddPropertyName = "add";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override string ElementName
        {
            get
            {
                return global::PebbleCode.Monitoring.Settings.AddPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::PebbleCode.Monitoring.Settings.AddPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::PebbleCode.Monitoring.Add)(element)).Key;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::PebbleCode.Monitoring.Add"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::PebbleCode.Monitoring.Add"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::PebbleCode.Monitoring.Add();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::PebbleCode.Monitoring.Add"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::PebbleCode.Monitoring.Add"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::PebbleCode.Monitoring.Add this[int index]
        {
            get
            {
                return ((global::PebbleCode.Monitoring.Add)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::PebbleCode.Monitoring.Add"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::PebbleCode.Monitoring.Add"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::PebbleCode.Monitoring.Add this[object key]
        {
            get
            {
                return ((global::PebbleCode.Monitoring.Add)(base.BaseGet(key)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::PebbleCode.Monitoring.Add"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::PebbleCode.Monitoring.Add"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Add(global::PebbleCode.Monitoring.Add add)
        {
            base.BaseAdd(add);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::PebbleCode.Monitoring.Add"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::PebbleCode.Monitoring.Add"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Remove(global::PebbleCode.Monitoring.Add add)
        {
            base.BaseRemove(this.GetElementKey(add));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::PebbleCode.Monitoring.Add"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::PebbleCode.Monitoring.Add"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::PebbleCode.Monitoring.Add GetItemAt(int index)
        {
            return ((global::PebbleCode.Monitoring.Add)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::PebbleCode.Monitoring.Add"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::PebbleCode.Monitoring.Add"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::PebbleCode.Monitoring.Add GetItemByKey(string key)
        {
            return ((global::PebbleCode.Monitoring.Add)(base.BaseGet(((object)(key)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace PebbleCode.Monitoring
{
    
    
    /// <summary>
    /// The Add Configuration Element.
    /// </summary>
    public partial class Add : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Key Property
        /// <summary>
        /// The XML name of the <see cref="Key"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string KeyPropertyName = "key";
        
        /// <summary>
        /// Gets or sets the Key.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Key.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PebbleCode.Monitoring.Add.KeyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Key
        {
            get
            {
                return ((string)(base[global::PebbleCode.Monitoring.Add.KeyPropertyName]));
            }
            set
            {
                base[global::PebbleCode.Monitoring.Add.KeyPropertyName] = value;
            }
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PebbleCode.Monitoring.Add.ValuePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Value
        {
            get
            {
                return ((string)(base[global::PebbleCode.Monitoring.Add.ValuePropertyName]));
            }
            set
            {
                base[global::PebbleCode.Monitoring.Add.ValuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace PebbleCode.Monitoring
{
    
    
    /// <summary>
    /// The ServiceMonitorGroup Configuration Element.
    /// </summary>
    public partial class ServiceMonitorGroup : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PebbleCode.Monitoring.ServiceMonitorGroup.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Name
        {
            get
            {
                return ((string)(base[global::PebbleCode.Monitoring.ServiceMonitorGroup.NamePropertyName]));
            }
            set
            {
                base[global::PebbleCode.Monitoring.ServiceMonitorGroup.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region ServiceMonitors Property
        /// <summary>
        /// The XML name of the <see cref="ServiceMonitors"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string ServiceMonitorsPropertyName = "serviceMonitors";
        
        /// <summary>
        /// Gets or sets the ServiceMonitors.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ServiceMonitors.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PebbleCode.Monitoring.ServiceMonitorGroup.ServiceMonitorsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::PebbleCode.Monitoring.ServiceMonitors ServiceMonitors
        {
            get
            {
                return ((global::PebbleCode.Monitoring.ServiceMonitors)(base[global::PebbleCode.Monitoring.ServiceMonitorGroup.ServiceMonitorsPropertyName]));
            }
            set
            {
                base[global::PebbleCode.Monitoring.ServiceMonitorGroup.ServiceMonitorsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace PebbleCode.Monitoring
{
    
    
    /// <summary>
    /// A collection of ServiceMonitorConfiguration instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::PebbleCode.Monitoring.ServiceMonitorConfiguration), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::PebbleCode.Monitoring.ServiceMonitors.ServiceMonitorConfigurationPropertyName)]
    public partial class ServiceMonitors : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::PebbleCode.Monitoring.ServiceMonitorConfiguration"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string ServiceMonitorConfigurationPropertyName = "serviceMonitorConfiguration";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override string ElementName
        {
            get
            {
                return global::PebbleCode.Monitoring.ServiceMonitors.ServiceMonitorConfigurationPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::PebbleCode.Monitoring.ServiceMonitors.ServiceMonitorConfigurationPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::PebbleCode.Monitoring.ServiceMonitorConfiguration)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::PebbleCode.Monitoring.ServiceMonitorConfiguration"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::PebbleCode.Monitoring.ServiceMonitorConfiguration"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::PebbleCode.Monitoring.ServiceMonitorConfiguration();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::PebbleCode.Monitoring.ServiceMonitorConfiguration"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::PebbleCode.Monitoring.ServiceMonitorConfiguration"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::PebbleCode.Monitoring.ServiceMonitorConfiguration this[int index]
        {
            get
            {
                return ((global::PebbleCode.Monitoring.ServiceMonitorConfiguration)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::PebbleCode.Monitoring.ServiceMonitorConfiguration"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::PebbleCode.Monitoring.ServiceMonitorConfiguration"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::PebbleCode.Monitoring.ServiceMonitorConfiguration this[object name]
        {
            get
            {
                return ((global::PebbleCode.Monitoring.ServiceMonitorConfiguration)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::PebbleCode.Monitoring.ServiceMonitorConfiguration"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="serviceMonitorConfiguration">The <see cref="global::PebbleCode.Monitoring.ServiceMonitorConfiguration"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Add(global::PebbleCode.Monitoring.ServiceMonitorConfiguration serviceMonitorConfiguration)
        {
            base.BaseAdd(serviceMonitorConfiguration);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::PebbleCode.Monitoring.ServiceMonitorConfiguration"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="serviceMonitorConfiguration">The <see cref="global::PebbleCode.Monitoring.ServiceMonitorConfiguration"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Remove(global::PebbleCode.Monitoring.ServiceMonitorConfiguration serviceMonitorConfiguration)
        {
            base.BaseRemove(this.GetElementKey(serviceMonitorConfiguration));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::PebbleCode.Monitoring.ServiceMonitorConfiguration"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::PebbleCode.Monitoring.ServiceMonitorConfiguration"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::PebbleCode.Monitoring.ServiceMonitorConfiguration GetItemAt(int index)
        {
            return ((global::PebbleCode.Monitoring.ServiceMonitorConfiguration)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::PebbleCode.Monitoring.ServiceMonitorConfiguration"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::PebbleCode.Monitoring.ServiceMonitorConfiguration"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::PebbleCode.Monitoring.ServiceMonitorConfiguration GetItemByKey(string name)
        {
            return ((global::PebbleCode.Monitoring.ServiceMonitorConfiguration)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
